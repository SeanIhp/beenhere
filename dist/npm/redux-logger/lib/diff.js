"use strict";var exports=module.exports={};
var _from = require('../../babel-runtime/core-js/array/from.js');

var _from2 = _interopRequireDefault2(_from);

function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diffLogger;

var _deepDiff = require('../../deep-diff/index.js');

var _deepDiff2 = _interopRequireDefault(_deepDiff);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
}

// https://github.com/flitbit/diff#differences
var dictionary = {
  'E': {
    color: '#2196F3',
    text: 'CHANGED:'
  },
  'N': {
    color: '#4CAF50',
    text: 'ADDED:'
  },
  'D': {
    color: '#F44336',
    text: 'DELETED:'
  },
  'A': {
    color: '#2196F3',
    text: 'ARRAY:'
  }
};

function style(kind) {
  return 'color: ' + dictionary[kind].color + '; font-weight: bold';
}

function render(diff) {
  var kind = diff.kind,
      path = diff.path,
      lhs = diff.lhs,
      rhs = diff.rhs,
      index = diff.index,
      item = diff.item;

  switch (kind) {
    case 'E':
      return [path.join('.'), lhs, '\u2192', rhs];
    case 'N':
      return [path.join('.'), rhs];
    case 'D':
      return [path.join('.')];
    case 'A':
      return [path.join('.') + '[' + index + ']', item];
    default:
      return [];
  }
}

function diffLogger(prevState, newState, logger, isCollapsed) {
  var diff = (0, _deepDiff2.default)(prevState, newState);

  try {
    if (isCollapsed) {
      logger.groupCollapsed('diff');
    } else {
      logger.group('diff');
    }
  } catch (e) {
    logger.log('diff');
  }

  if (diff) {
    diff.forEach(function (elem) {
      var kind = elem.kind;

      var output = render(elem);

      logger.log.apply(logger, ['%c ' + dictionary[kind].text, style(kind)].concat(_toConsumableArray(output)));
    });
  } else {
    logger.log('\u2014\u2014 no diff \u2014\u2014');
  }

  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('\u2014\u2014 diff end \u2014\u2014 ');
  }
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpZmYuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiZGlmZkxvZ2dlciIsIl9kZWVwRGlmZiIsInJlcXVpcmUiLCJfZGVlcERpZmYyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiYXJyMiIsImxlbmd0aCIsImRpY3Rpb25hcnkiLCJjb2xvciIsInRleHQiLCJzdHlsZSIsImtpbmQiLCJyZW5kZXIiLCJkaWZmIiwicGF0aCIsImxocyIsInJocyIsImluZGV4IiwiaXRlbSIsImpvaW4iLCJwcmV2U3RhdGUiLCJuZXdTdGF0ZSIsImxvZ2dlciIsImlzQ29sbGFwc2VkIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cCIsImUiLCJsb2ciLCJmb3JFYWNoIiwiZWxlbSIsIm91dHB1dCIsImFwcGx5IiwiY29uY2F0IiwiZ3JvdXBFbmQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCQyxVQUFsQjs7QUFFQSxJQUFJQyxZQUFZQyxRQUFRLFdBQVIsQ0FBaEI7O0FBRUEsSUFBSUMsYUFBYUMsdUJBQXVCSCxTQUF2QixDQUFqQjs7QUFFQSxTQUFTRyxzQkFBVCxDQUFnQ0MsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFTixTQUFTTSxHQUFYLEVBQXJDO0FBQXdEOztBQUUvRixTQUFTRSxrQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUM7QUFBRSxNQUFJQyxNQUFNQyxPQUFOLENBQWNGLEdBQWQsQ0FBSixFQUF3QjtBQUFFLFNB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STtBQUNGTCxXQUFPVyxRQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU9QLENBQVAsRUFBVTtBQUNWSixXQUFPSyxHQUFQLENBQVcscUNBQVg7QUFDRDtBQUNGO0FBQ0RPLE9BQU81QyxPQUFQLEdBQWlCQSxRQUFRLFNBQVIsQ0FBakIiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRpZmZMb2dnZXI7XG5cbnZhciBfZGVlcERpZmYgPSByZXF1aXJlKCdkZWVwLWRpZmYnKTtcblxudmFyIF9kZWVwRGlmZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRGlmZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmxpdGJpdC9kaWZmI2RpZmZlcmVuY2VzXG52YXIgZGljdGlvbmFyeSA9IHtcbiAgJ0UnOiB7XG4gICAgY29sb3I6ICcjMjE5NkYzJyxcbiAgICB0ZXh0OiAnQ0hBTkdFRDonXG4gIH0sXG4gICdOJzoge1xuICAgIGNvbG9yOiAnIzRDQUY1MCcsXG4gICAgdGV4dDogJ0FEREVEOidcbiAgfSxcbiAgJ0QnOiB7XG4gICAgY29sb3I6ICcjRjQ0MzM2JyxcbiAgICB0ZXh0OiAnREVMRVRFRDonXG4gIH0sXG4gICdBJzoge1xuICAgIGNvbG9yOiAnIzIxOTZGMycsXG4gICAgdGV4dDogJ0FSUkFZOidcbiAgfVxufTtcblxuZnVuY3Rpb24gc3R5bGUoa2luZCkge1xuICByZXR1cm4gJ2NvbG9yOiAnICsgZGljdGlvbmFyeVtraW5kXS5jb2xvciArICc7IGZvbnQtd2VpZ2h0OiBib2xkJztcbn1cblxuZnVuY3Rpb24gcmVuZGVyKGRpZmYpIHtcbiAgdmFyIGtpbmQgPSBkaWZmLmtpbmQsXG4gICAgICBwYXRoID0gZGlmZi5wYXRoLFxuICAgICAgbGhzID0gZGlmZi5saHMsXG4gICAgICByaHMgPSBkaWZmLnJocyxcbiAgICAgIGluZGV4ID0gZGlmZi5pbmRleCxcbiAgICAgIGl0ZW0gPSBkaWZmLml0ZW07XG5cblxuICBzd2l0Y2ggKGtpbmQpIHtcbiAgICBjYXNlICdFJzpcbiAgICAgIHJldHVybiBbcGF0aC5qb2luKCcuJyksIGxocywgJ1xcdTIxOTInLCByaHNdO1xuICAgIGNhc2UgJ04nOlxuICAgICAgcmV0dXJuIFtwYXRoLmpvaW4oJy4nKSwgcmhzXTtcbiAgICBjYXNlICdEJzpcbiAgICAgIHJldHVybiBbcGF0aC5qb2luKCcuJyldO1xuICAgIGNhc2UgJ0EnOlxuICAgICAgcmV0dXJuIFtwYXRoLmpvaW4oJy4nKSArICdbJyArIGluZGV4ICsgJ10nLCBpdGVtXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpZmZMb2dnZXIocHJldlN0YXRlLCBuZXdTdGF0ZSwgbG9nZ2VyLCBpc0NvbGxhcHNlZCkge1xuICB2YXIgZGlmZiA9ICgwLCBfZGVlcERpZmYyLmRlZmF1bHQpKHByZXZTdGF0ZSwgbmV3U3RhdGUpO1xuXG4gIHRyeSB7XG4gICAgaWYgKGlzQ29sbGFwc2VkKSB7XG4gICAgICBsb2dnZXIuZ3JvdXBDb2xsYXBzZWQoJ2RpZmYnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmdyb3VwKCdkaWZmJyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZygnZGlmZicpO1xuICB9XG5cbiAgaWYgKGRpZmYpIHtcbiAgICBkaWZmLmZvckVhY2goZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciBraW5kID0gZWxlbS5raW5kO1xuXG4gICAgICB2YXIgb3V0cHV0ID0gcmVuZGVyKGVsZW0pO1xuXG4gICAgICBsb2dnZXIubG9nLmFwcGx5KGxvZ2dlciwgWyclYyAnICsgZGljdGlvbmFyeVtraW5kXS50ZXh0LCBzdHlsZShraW5kKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShvdXRwdXQpKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmxvZygnXFx1MjAxNFxcdTIwMTQgbm8gZGlmZiBcXHUyMDE0XFx1MjAxNCcpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5sb2coJ1xcdTIwMTRcXHUyMDE0IGRpZmYgZW5kIFxcdTIwMTRcXHUyMDE0ICcpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiXX0=