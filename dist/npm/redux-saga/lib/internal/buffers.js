"use strict";var exports=module.exports={};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffers = exports.BUFFER_OVERFLOW = undefined;

var _utils = require('./utils.js');

var BUFFER_OVERFLOW = exports.BUFFER_OVERFLOW = 'Channel\'s Buffer overflow!';

var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;

var zeroBuffer = { isEmpty: _utils.kTrue, put: _utils.noop, take: _utils.noop };

function ringBuffer() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var overflowAction = arguments[1];

  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;

  var push = function push(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };

  var take = function take() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };

  var flush = function flush() {
    var items = [];
    while (length) {
      items.push(take());
    }
    return items;
  };

  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit = void 0;
        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);
          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;
          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;

            arr = flush();

            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;

            arr.length = doubledLimit;
            limit = doubledLimit;

            push(it);
            break;
          default:
          // DROP
        }
      }
    },
    take: take, flush: flush
  };
}

var buffers = exports.buffers = {
  none: function none() {
    return zeroBuffer;
  },
  fixed: function fixed(limit) {
    return ringBuffer(limit, ON_OVERFLOW_THROW);
  },
  dropping: function dropping(limit) {
    return ringBuffer(limit, ON_OVERFLOW_DROP);
  },
  sliding: function sliding(limit) {
    return ringBuffer(limit, ON_OVERFLOW_SLIDE);
  },
  expanding: function expanding(initialSize) {
    return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1ZmZlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJidWZmZXJzIiwiQlVGRkVSX09WRVJGTE9XIiwidW5kZWZpbmVkIiwiX3V0aWxzIiwicmVxdWlyZSIsIk9OX09WRVJGTE9XX1RIUk9XIiwiT05fT1ZFUkZMT1dfRFJPUCIsIk9OX09WRVJGTE9XX1NMSURFIiwiT05fT1ZFUkZMT1dfRVhQQU5EIiwiemVyb0J1ZmZlciIsImlzRW1wdHkiLCJrVHJ1ZSIsInB1dCIsIm5vb3AiLCJ0YWtlIiwicmluZ0J1ZmZlciIsImxpbWl0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwib3ZlcmZsb3dBY3Rpb24iLCJhcnIiLCJBcnJheSIsInB1c2hJbmRleCIsInBvcEluZGV4IiwicHVzaCIsIml0IiwiZmx1c2giLCJpdGVtcyIsImRvdWJsZWRMaW1pdCIsIkVycm9yIiwibm9uZSIsImZpeGVkIiwiZHJvcHBpbmciLCJzbGlkaW5nIiwiZXhwYW5kaW5nIiwiaW5pdGlhbFNpemUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCRixRQUFRRyxlQUFSLEdBQTBCQyxTQUE1Qzs7QUFFQSxJQUFJQyxTQUFTQyxRQUFRLFNBQVIsQ0FBYjs7QUFFQSxJQUFJSCxrQkFBa0JILFFBQVFHLGVBQVIsR0FBMEIsNkJBQWhEOztBQUVBLElBQUlJLG9CQUFvQixDQUF4QjtBQUNBLElBQUlDLG1CQUFtQixDQUF2QjtBQUNBLElBQUlDLG9CQUFvQixDQUF4QjtBQUNBLElBQUlDLHFCQUFxQixDQUF6Qjs7QUFFQSxJQUFJQyxhQUFhLEVBQUVDLFNBQVNQLE9BQU9RLEtBQWxCLEVBQXlCQyxLQUFLVCxPQUFPVSxJQUFyQyxFQUEyQ0MsTUFBTVgsT0FBT1UsSUFBeEQsRUFBakI7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MkIsYUFBVyxTQUFTQSxTQUFULENBQW1CQyxXQUFuQixFQUFnQztBQUN6QyxXQUFPcEIsV0FBV29CLFdBQVgsRUFBd0IzQixrQkFBeEIsQ0FBUDtBQUNEO0FBZjZCLENBQWhDIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJ1ZmZlcnMgPSBleHBvcnRzLkJVRkZFUl9PVkVSRkxPVyA9IHVuZGVmaW5lZDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEJVRkZFUl9PVkVSRkxPVyA9IGV4cG9ydHMuQlVGRkVSX09WRVJGTE9XID0gJ0NoYW5uZWxcXCdzIEJ1ZmZlciBvdmVyZmxvdyEnO1xuXG52YXIgT05fT1ZFUkZMT1dfVEhST1cgPSAxO1xudmFyIE9OX09WRVJGTE9XX0RST1AgPSAyO1xudmFyIE9OX09WRVJGTE9XX1NMSURFID0gMztcbnZhciBPTl9PVkVSRkxPV19FWFBBTkQgPSA0O1xuXG52YXIgemVyb0J1ZmZlciA9IHsgaXNFbXB0eTogX3V0aWxzLmtUcnVlLCBwdXQ6IF91dGlscy5ub29wLCB0YWtlOiBfdXRpbHMubm9vcCB9O1xuXG5mdW5jdGlvbiByaW5nQnVmZmVyKCkge1xuICB2YXIgbGltaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDEwO1xuICB2YXIgb3ZlcmZsb3dBY3Rpb24gPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIGFyciA9IG5ldyBBcnJheShsaW1pdCk7XG4gIHZhciBsZW5ndGggPSAwO1xuICB2YXIgcHVzaEluZGV4ID0gMDtcbiAgdmFyIHBvcEluZGV4ID0gMDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2goaXQpIHtcbiAgICBhcnJbcHVzaEluZGV4XSA9IGl0O1xuICAgIHB1c2hJbmRleCA9IChwdXNoSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgIGxlbmd0aCsrO1xuICB9O1xuXG4gIHZhciB0YWtlID0gZnVuY3Rpb24gdGFrZSgpIHtcbiAgICBpZiAobGVuZ3RoICE9IDApIHtcbiAgICAgIHZhciBpdCA9IGFycltwb3BJbmRleF07XG4gICAgICBhcnJbcG9wSW5kZXhdID0gbnVsbDtcbiAgICAgIGxlbmd0aC0tO1xuICAgICAgcG9wSW5kZXggPSAocG9wSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgICAgcmV0dXJuIGl0O1xuICAgIH1cbiAgfTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB3aGlsZSAobGVuZ3RoKSB7XG4gICAgICBpdGVtcy5wdXNoKHRha2UoKSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoID09IDA7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uIHB1dChpdCkge1xuICAgICAgaWYgKGxlbmd0aCA8IGxpbWl0KSB7XG4gICAgICAgIHB1c2goaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRvdWJsZWRMaW1pdCA9IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChvdmVyZmxvd0FjdGlvbikge1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfVEhST1c6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQlVGRkVSX09WRVJGTE9XKTtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1NMSURFOlxuICAgICAgICAgICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICAgICAgICAgIHB1c2hJbmRleCA9IChwdXNoSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgICAgICAgICAgcG9wSW5kZXggPSBwdXNoSW5kZXg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX0VYUEFORDpcbiAgICAgICAgICAgIGRvdWJsZWRMaW1pdCA9IDIgKiBsaW1pdDtcblxuICAgICAgICAgICAgYXJyID0gZmx1c2goKTtcblxuICAgICAgICAgICAgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHB1c2hJbmRleCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwb3BJbmRleCA9IDA7XG5cbiAgICAgICAgICAgIGFyci5sZW5ndGggPSBkb3VibGVkTGltaXQ7XG4gICAgICAgICAgICBsaW1pdCA9IGRvdWJsZWRMaW1pdDtcblxuICAgICAgICAgICAgcHVzaChpdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIERST1BcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdGFrZTogdGFrZSwgZmx1c2g6IGZsdXNoXG4gIH07XG59XG5cbnZhciBidWZmZXJzID0gZXhwb3J0cy5idWZmZXJzID0ge1xuICBub25lOiBmdW5jdGlvbiBub25lKCkge1xuICAgIHJldHVybiB6ZXJvQnVmZmVyO1xuICB9LFxuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfVEhST1cpO1xuICB9LFxuICBkcm9wcGluZzogZnVuY3Rpb24gZHJvcHBpbmcobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfRFJPUCk7XG4gIH0sXG4gIHNsaWRpbmc6IGZ1bmN0aW9uIHNsaWRpbmcobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfU0xJREUpO1xuICB9LFxuICBleHBhbmRpbmc6IGZ1bmN0aW9uIGV4cGFuZGluZyhpbml0aWFsU2l6ZSkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGluaXRpYWxTaXplLCBPTl9PVkVSRkxPV19FWFBBTkQpO1xuICB9XG59OyJdfQ==